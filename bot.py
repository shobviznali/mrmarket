import telebot
import os
from dotenv import load_dotenv
from woocommerce import API
from openai import OpenAI
import itertools


jst = 1
# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WC_URL = os.getenv("WOOCOMMERCE_URL")
WC_KEY = os.getenv("WOOCOMMERCE_CONSUMER_KEY")
WC_SECRET = os.getenv("WOOCOMMERCE_CONSUMER_SECRET")

bot = telebot.TeleBot(BOT_TOKEN)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# WooCommerce API
wcapi = API(
    url=WC_URL,
    consumer_key=WC_KEY,
    consumer_secret=WC_SECRET,
    version="wc/v3"
)

# –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Å —Ä—É—Å—Å–∫–æ–≥–æ/–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ –∞—Ä–º—è–Ω—Å–∫–∏–π
transliteration_map = {
    'a': ['’°'], 'b': ['’¢'], 'g': ['’£'], 'd': ['’§'],
    'e': ['’•', '’ß'], 'z': ['’¶'], 't': ['’©', '’ø'], 'i': ['’´'],
    'l': ['’¨'], 'kh': ['’≠'], 'k': ['’Ø', '÷Ñ'], 'h': ['’∞'], 'j': ['’ª'],
    'sh': ['’∑'], 'ch': ['’π', '’≥'], 'zh': ['’™'], 'x': ['’≠', '’≤'],
    'c': ['÷Å', '÷Ñ', '’Æ'], 'm': ['’¥'], 'y': ['’µ'], 'n': ['’∂'],
    'o': ['÷Ö', '’∏'], 'p': ['’∫', '÷É'], 'r': ['÷Ä', '’º'], 's': ['’Ω'],
    'v': ['’æ'], 'u': ['’∏÷Ç'], 'f': ['÷Ü'], 'q': ['÷Ñ'], 'ev': ['÷á'],
    'ts': ['÷Å', '’Æ'], 'ye': ['’•'], 'gh': ['’≤'], 'vo': ['’∏']
}


# –û–±—Ä–∞—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Å –∞—Ä–º—è–Ω—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
reverse_map = {
    '’°': 'a', '’¢': 'b', '’£': 'g', '’§': 'd', '’•': 'e', '’ß': 'e', '’¶': 'z',
    '’ø': 't', '’©': 't', '’´': 'i', '’¨': 'l', '’≠': 'kh', '’Ø': 'k', '÷Ñ': 'k',
    '’∞': 'h', '’±': 'dz', '’™': 'zh', '’ª': 'j', '’∑': 'sh', '’π': 'ch', '’≥': 'ch',
    '’≤': 'gh', '÷Å': 'ts', '’Æ': 'ts', '’¥': 'm', '’µ': 'y', '’∂': 'n',
    '÷Ö': 'o', '’∏': 'vo', '’∫': 'p', '÷É': 'p', '÷Ä': 'r', '’º': 'r',
    '’Ω': 's', '’æ': 'v', '’∏÷Ç': 'u', '÷Ü': 'f', '÷á': 'ev'
}

def generate_transliterations(text):
    text = text.lower()
    variants = [[]]

    i = 0
    while i < len(text):
        matched = False
        for l in (3, 2, 1):  # –ü—Ä–æ–±—É–µ–º 3-, 2- –∏ 1-–±—É–∫–≤–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            part = text[i:i + l]
            if part in transliteration_map:
                replacements = transliteration_map[part]
                variants[-1].append(replacements)
                i += l
                matched = True
                break
        if not matched:
            variants[-1].append([text[i]])  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
            i += 1

    combinations = itertools.product(*variants[-1])
    return [''.join(c) for c in combinations]


def transliterate_to_armenian(text):
    text = text.lower()
    result = ''
    i = 0
    while i < len(text):
        two_letter = text[i:i + 2]
        if two_letter in transliteration_map:
            result += transliteration_map[two_letter][0]
            i += 2
            continue
        one_letter = text[i]
        if one_letter in transliteration_map:
            result += transliteration_map[one_letter][0]
        else:
            result += one_letter
        i += 1
    return result


def transliterate_to_english(text):
    result = ''
    i = 0
    while i < len(text):
        if text[i:i + 2] == '’∏÷Ç':
            result += 'u'
            i += 2
            continue
        result += reverse_map.get(text[i], text[i])
        i += 1
    return result

def search_product_multi(name_original, _):
    search_terms = set()
    search_terms.add(name_original)

    if any(char in reverse_map for char in name_original):
        name_english = transliterate_to_english(name_original)
        search_terms.add(name_english)

    armenian_variants = generate_transliterations(name_original)
    search_terms.update(armenian_variants)

    all_results = []
    seen_names = set()

    for term in search_terms:
        try:
            response = wcapi.get("products", params={"search": term})
            response.raise_for_status()
        except Exception as e:
            print(f"[WooCommerce Error] {e}")
            continue

        data = response.json()
        if data:
            for product in data:
                product_name = product["name"]
                if product_name not in seen_names:
                    seen_names.add(product_name)
                    all_results.append({
                        "name": product_name,
                        "price": product.get("price", "’π’´ ’∂’∑’æ’°’Æ"),
                        "link": product.get("permalink", "")
                    })
            # –ù–∞—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ –∏—Å–∫–∞—Ç—å
            break

    if not all_results:
        return f"’è’æ’µ’°’¨ ’°’∫÷Ä’°’∂÷Ñ’® `{name_original}` ’π’´ ’£’ø’∂’æ’•’¨ üòï", []

    return None, all_results[:3]


def extract_product_name(user_input):
    prompt = f"""
‘¥’∏÷Ç ’°÷Ä’∞’•’Ω’ø’°’Ø’°’∂ ’¢’°’∂’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ ’•’Ω, ’∏÷Ä’® ÷Ö’£’∂’∏÷Ç’¥ ’ß ’§’∏÷Ç÷Ä’Ω ’¢’•÷Ä’•’¨ ’°’∫÷Ä’°’∂÷Ñ’´ ’°’∂’∏÷Ç’∂’® ’∞’°’≥’°’≠’∏÷Ä’§’´ ’∂’°’¥’°’Ø’´÷Å
’Ü’°’¥’°’Ø’®: "{user_input}"

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ. 
–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.
"""
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2,
    )

    extracted_name = response.choices[0].message.content.strip()
    armenian_name = transliterate_to_armenian(extracted_name)
    print(f"[GPT Extracted] '{extracted_name}' ‚Üí [Armenian] '{armenian_name}'")
    return extracted_name, armenian_name

def generate_gpt_response(user_question, products):
    product_info = "\n".join([
        f"{p['name']} ‚Äî {p['price']} ’§÷Ä’°’¥ ‚Äî {p['link']}"
        for p in products
    ])

    prompt = f"""
‘¥’∏÷Ç ’≠’°’∂’∏÷Ç’©’´ ÷Ö’∂’¨’°’µ’∂ ’Ø’∏’∂’Ω’∏÷Ç’¨’ø’°’∂’ø ’•’Ω÷â ‘±’∞’° ’©’• ’´’∂’π ’ß ’∞’°÷Ä÷Å÷Ä’•’¨ ’∞’°’≥’°’≠’∏÷Ä’§’® "{user_question}"

‘±’∞’° ’©’• ’´’∂’π ’•’∂÷Ñ ’£’ø’•’¨
{product_info}

’ä’°’ø’°’Ω’≠’°’∂’´÷Ä ’¢’°÷Ä’•’∞’°’¥’¢’∏÷Ç’µ’©, ’°’Ω’•’Ω ’©’• ’§’∏÷Ç ’Ø’∏’∂’Ω’∏÷Ç’¨’ø’°’∂’ø ’•’Ω ÷á ’°’º’°’ª’°÷Ä’Ø’´÷Ä ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’®÷â ‘±’º’°’∂÷Å ’°’æ’•’¨’∏÷Ä’§ ’´’∂÷Ü’∏÷Ä’¥’°÷Å’´’°’µ’´÷â ’à÷Ç’≤’°÷Ä’Ø’´÷Ä ’∞’≤’∏÷Ç’¥’∂’•÷Ä’®÷â ’é’•÷Ä’ª’∏÷Ç’¥ ’¥’´’°’µ’∂ ’∂’∑’´÷Ä’ù ’∏÷Ç’∂’´ ’°÷Ä’§’µ’∏÷Ñ ’°’µ’¨ ’∞’°÷Ä÷Å’•÷Ä ’∞’°’≥’°’≠’∏÷Ä’§’®÷â
"""

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.6,
    )

    return response.choices[0].message.content

start_message = "’à’≤’ª’∏÷Ç’µ’∂÷â ‘µ’Ω MR Market-’´ ÷Ö’∂’¨’°’µ’∂ ’≠’∏÷Ä’∞÷Ä’§’°’ø’∏÷Ç’∂ ’•’¥÷â ‘µ’Ω ’Ø÷Ö’£’∂’•’¥ ’Å’•’¶ ’°÷Ä’°’£ ’£’ø’∂’•’¨ ÷Å’°’∂’Ø’°’¨’´ ’°’∫÷Ä’°’∂÷Ñ’®÷â"

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, start_message)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_query = message.text.strip()

    extracted_name, armenian_name = extract_product_name(user_query)
    error, results = search_product_multi(extracted_name, armenian_name)

    if error:
        bot.send_message(message.chat.id, '‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’£÷Ä’•’¨ ’°’∫÷Ä’°’∂÷Ñ’´ ’°’∂’∏÷Ç’∂’®')
        return

    gpt_reply = generate_gpt_response(user_query, results)
    bot.send_message(message.chat.id, gpt_reply, parse_mode='Markdown')

    search_link = f"https://mrmarket.am/?s={extracted_name}&post_type=product"
    bot.send_message(message.chat.id, f"‘±’µ’¨ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä’´ ’∞’°’¥’°÷Ä ’°’∂÷Å’•÷Ñ ’∞’•’ø÷á’µ’°’¨ ’∞’≤’∏÷Ç’¥’∏’æ {search_link}")

print("‘≤’∏’ø’® ’∫’°’ø÷Ä’°’Ω’ø ’ß üöÄ")
bot.polling()

